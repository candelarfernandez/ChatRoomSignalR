// <auto-generated />
using System;
using ChatRoom.Datos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatRoom.Datos.Migrations
{
    [DbContext(typeof(SubastaContext))]
    [Migration("20240615223238_AjustarLongitudFotoProductoNombre")]
    partial class AjustarLongitudFotoProductoNombre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdVenta")
                        .HasColumnType("int")
                        .HasColumnName("idVenta");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mensaje");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3213E83FF347DE52");

                    b.HasIndex("IdVenta");

                    b.ToTable("Notificacion", (string)null);
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Ofertum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdComprador")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idComprador");

                    b.Property<int?>("IdSala")
                        .HasColumnType("int")
                        .HasColumnName("idSala");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("monto");

                    b.HasKey("Id")
                        .HasName("PK__Oferta__3213E83F1D1D8CFF");

                    b.HasIndex("IdComprador");

                    b.HasIndex("IdSala");

                    b.ToTable("Oferta");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("PrecioFinal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("precioFinal");

                    b.HasKey("Id")
                        .HasName("PK__Producto__3213E83FE0211E48");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activa")
                        .HasColumnType("bit")
                        .HasColumnName("activa");

                    b.Property<string>("FotoProductoNombre")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("fotoProductoNombre");

                    b.Property<DateTime?>("HoraFinalizacion")
                        .HasColumnType("datetime")
                        .HasColumnName("horaFinalizacion");

                    b.Property<DateTime?>("HoraUltimaOferta")
                        .HasColumnType("datetime")
                        .HasColumnName("horaUltimaOferta");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int")
                        .HasColumnName("idProducto");

                    b.Property<string>("IdVendedor")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idVendedor");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre");

                    b.Property<long?>("TiempoRestante")
                        .HasColumnType("bigint")
                        .HasColumnName("tiempoRestante");

                    b.Property<string>("UsuariosConectados")
                        .HasColumnType("text")
                        .HasColumnName("usuariosConectados");

                    b.HasKey("Id")
                        .HasName("PK__Sala__3213E83F37C04928");

                    b.HasIndex("IdProducto")
                        .IsUnique();

                    b.HasIndex("IdVendedor");

                    b.ToTable("Sala", (string)null);
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdComprador")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idComprador");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<string>("IdVendedor")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idVendedor");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Venta__3213E83F603E29AC");

                    b.HasIndex("IdComprador");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdVendedor");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<decimal?>("DineroDisponible")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("dineroDisponible");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("password");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Notificacion", b =>
                {
                    b.HasOne("ChatRoom.Datos.Entidades.Venta", "IdVentaNavigation")
                        .WithMany("Notificacions")
                        .HasForeignKey("IdVenta")
                        .IsRequired()
                        .HasConstraintName("FK__Notificac__idVen__59063A47");

                    b.Navigation("IdVentaNavigation");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Ofertum", b =>
                {
                    b.HasOne("ChatRoom.Datos.Entidades.Usuario", "IdCompradorNavigation")
                        .WithMany("Oferta")
                        .HasForeignKey("IdComprador")
                        .HasConstraintName("FK__Oferta__idCompra__5535A963");

                    b.HasOne("ChatRoom.Datos.Entidades.Sala", "IdSalaNavigation")
                        .WithMany("Oferta")
                        .HasForeignKey("IdSala")
                        .HasConstraintName("FK__Oferta__idSala__5629CD9C");

                    b.Navigation("IdCompradorNavigation");

                    b.Navigation("IdSalaNavigation");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Sala", b =>
                {
                    b.HasOne("ChatRoom.Datos.Entidades.Producto", "IdProductoNavigation")
                        .WithOne()
                        .HasForeignKey("ChatRoom.Datos.Entidades.Sala", "IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Sala_Producto");

                    b.HasOne("ChatRoom.Datos.Entidades.Usuario", "IdVendedorNavigation")
                        .WithMany("Salas")
                        .HasForeignKey("IdVendedor")
                        .HasConstraintName("FK__Sala__idVendedor__52593CB8");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdVendedorNavigation");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Venta", b =>
                {
                    b.HasOne("ChatRoom.Datos.Entidades.Usuario", "IdCompradorNavigation")
                        .WithMany("VentumIdCompradorNavigations")
                        .HasForeignKey("IdComprador")
                        .HasConstraintName("FK__Venta__idComprad__4F7CD00D");

                    b.HasOne("ChatRoom.Datos.Entidades.Producto", "IdProductoNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Venta__IdProduct__4D94879B");

                    b.HasOne("ChatRoom.Datos.Entidades.Usuario", "IdVendedorNavigation")
                        .WithMany("VentumIdVendedorNavigations")
                        .HasForeignKey("IdVendedor")
                        .HasConstraintName("FK__Venta__idVendedo__4E88ABD4");

                    b.Navigation("IdCompradorNavigation");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdVendedorNavigation");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("ChatRoom.Datos.Entidades.Usuario", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Producto", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Sala", b =>
                {
                    b.Navigation("Oferta");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Venta", b =>
                {
                    b.Navigation("Notificacions");
                });

            modelBuilder.Entity("ChatRoom.Datos.Entidades.Usuario", b =>
                {
                    b.Navigation("Oferta");

                    b.Navigation("Salas");

                    b.Navigation("VentumIdCompradorNavigations");

                    b.Navigation("VentumIdVendedorNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
